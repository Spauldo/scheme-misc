(define-module (spauldo acceleration)
  #:use-module (ice-9 format)
  #:use-module (ice-9 optargs))

(define (square x)
  (* x x))

(define (aitken x0 x1 x2)
  (- x2
     (/ (square (- x2 x1))
        (- (- x2 x1) (- x1 x0)))))

(define (seq1 n)
  (exact->inexact (* (expt -1 n) (/ 1 (+ 12 (* 10 n))))))

(define (seq2 n)
  (exact->inexact (* (expt -1 n) (/ (expt 10 n) (1+ n)))))

(define (partial-sum f n)
  (define (psh n sum)
    (if (>= n 0)
        (psh (1- n) (+ sum (f n)))
        sum))
  (if (> n 0)
      (psh (1- n) 0)
      0))

(define (compute-cols rows)
  (1+ (floor (/ (1- rows) 2))))

(define (print-2d-array a)
  (let ((rows (cadar (array-shape a)))
        (cols (cadadr (array-shape a)))
        (size 0))
    (do ((r 0 (1+ r)))
        ((> r rows))
      (do ((c 0 (1+ c)))
          ((> c cols))
        (format #t "~18,12f " (array-ref a r c)))
      (newline)))
  a)

(define* (aitken-triangle f rows #:optional (rev #f))
  (let* ((cols (compute-cols rows))
         (results (make-array 0 rows cols)))
    (define (col-start col)
      (* 2 col))
    (define (col-rev-start col)
      (- (1- cols) (* 2 col)))
    (define (fill-col0 row)
      (if (< row rows)
          (begin
            (array-set! results (f row) row 0)
            (fill-col0 (1+ row)))
          #t))
    (define (do-aitken row col)
      (if (< row rows)
          (begin
            (array-set! results (aitken (array-ref results (- row 2) (1- col))
                                        (array-ref results (1- row) (1- col))
                                        (array-ref results row (1- col)))
                        row col)
            (do-aitken (1+ row) col))
          (if (< col cols)
              (do-aitken (col-start (1+ col)) (1+ col))
              #t)))
    (define (do-rev-aiken row col)
      (if (>= row 0)
          (begin
            (array-set! results (aitken (array-ref results (+ 2 row) (1- col))
                                        (array-ref results (1+ row) (1- col))
                                        (array-ref results row (1- col)))
                        row col)
            (do-rev-aiken (1- row) col))
          (if (< col cols)
              (begin
                (display "Row start for column ")
                (display (1+ col))
                (display ": ")
                (display (col-rev-start (1+ col)))
                (newline)
                (do-rev-aiken (col-rev-start (1+ col)) (1+ col)))
              #t)))
    (if rev
        (display "Reverse Aitken")
        (display "Forward Aitken"))
    (newline)
    (fill-col0 0)
    (when (> cols 1)
      (if rev
          (do-rev-aiken (- rows 3) 1)
          (do-aitken 2 1)))
    results))

;(print-2d-array (aitken-triangle (lambda (n) (partial-sum seq1 n)) 200))
